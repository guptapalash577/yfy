package com.weed.yfy.service.impl;

import java.io.File;
import java.util.HashMap;
import java.util.Map;

import javax.mail.internet.MimeMessage;

import org.apache.log4j.Logger;
import org.apache.velocity.app.VelocityEngine;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.FileSystemResource;
import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.mail.javamail.MimeMessageHelper;
import org.springframework.mail.javamail.MimeMessagePreparator;
import org.springframework.stereotype.Service;
import org.springframework.ui.velocity.VelocityEngineUtils;

import com.weed.yfy.service.MailingService;

/**
 * @author palash
 *
 */
@Service
public class MailingServiceImpl implements MailingService {

	@Autowired
	private JavaMailSender mailSender;
 
	private static final Logger logger = Logger.getLogger(MailingServiceImpl.class);
	
	@Autowired
	private VelocityEngine velocityEngine;
	
	public void send(final SimpleMailMessage msg, Map<Object, Object> hTemplateVariables, final String templateFileName) {
		final Map<String, Object>  hTemplateVariablesConverted = new HashMap<String, Object>();
		for (Object o : hTemplateVariables.keySet()) {
			hTemplateVariablesConverted.put((String)o, hTemplateVariables.get(o));
		}
		new Thread(new Runnable() {
			public void run() {
				MimeMessagePreparator preparator = new MimeMessagePreparator() {
					public void prepare(MimeMessage mimeMessage) throws Exception {
						MimeMessageHelper message = new MimeMessageHelper(mimeMessage);
						message.setTo(msg.getTo());
						if(msg.getCc()!=null){
							message.setCc(msg.getCc());
						}
						message.setFrom(msg.getFrom());
						message.setSubject(msg.getSubject());
						String body = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, templateFileName,"utf-8", hTemplateVariablesConverted);
						message.setText(body, true);
					}
				};
				try
				{
					mailSender.send(preparator);
				} catch(Throwable t) {
					logger.error("MailingServiceImpl got error!!!!");
					t.printStackTrace();
				}
			}
		   }).start();
	}

	public void sendEmailWithAttachment(final SimpleMailMessage msg, final String attachmentFile, Map<Object, Object> hTemplateVariables, final String templateFileName) {
		final Map<String, Object>  hTemplateVariablesConverted = new HashMap<String, Object>();
		for (Object o : hTemplateVariables.keySet()) {
			hTemplateVariablesConverted.put((String)o, hTemplateVariables.get(o));
		}
		new Thread(new Runnable() {
			public void run() {
		        MimeMessagePreparator preparator = new MimeMessagePreparator() {
		            public void prepare(MimeMessage mimeMessage) throws Exception {
		                MimeMessageHelper message = new MimeMessageHelper(mimeMessage,true);
		                message.setTo(msg.getTo());
		                message.setFrom(msg.getFrom());
		                message.setSubject(msg.getSubject());
		               if(attachmentFile != null){
		                	FileSystemResource file = new FileSystemResource(new File(attachmentFile));
		                	message.addAttachment(file.getFilename(), file);
		                }
		                message.setText(VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, templateFileName, "", hTemplateVariablesConverted),true);
		            }
		        };
		        mailSender.send(preparator);
		        logger.error("MailingServiceImpl Email Successfully sent");
			}
		}).start();
	}
}
